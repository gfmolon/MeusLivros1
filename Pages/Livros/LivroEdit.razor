@page "/livro/edit/{Id:int}"
@inject ILivroService LivroService
@inject NavigationManager Navigation

<h3>@(Livro.Id == 0 ? "Criar Novo Livro" : "Editar Livro")</h3>

<EditForm Model="@Livro" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Título:</label>
        <InputText @bind-Value="Livro.Titulo" class="form-control" />
    </div>
    <div class="form-group">
        <label>Autor:</label>
        <InputText @bind-Value="Livro.Autor" class="form-control" />
    </div>
    <div class="form-group">
        <label>Data de Publicação:</label>
        <InputDate @bind-Value="Livro.DataPublicacao" class="form-control" />
    </div>
    <div class="form-group">
        <label>Gênero:</label>
        <InputText @bind-Value="Livro.Genero" class="form-control" />
    </div>
    <div class="form-group">
        <label>Categoria:</label>
        <select @bind="Livro.CategoriaId" class="form-control">
            <option value="">Selecione uma Categoria</option>
            @foreach (var categoria in Categorias)
            {
                <option value="@categoria.Id">@categoria.Nome</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Salvar</button>
    <a href="/livros" class="btn btn-secondary">Cancelar</a>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Livro Livro { get; set; } = new Livro();
    private List<Categoria> Categorias { get; set; } = new List<Categoria>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Carregar categorias
            Categorias = await LivroService.GetAllCategoriasAsync();

            // Carregar livro para edição
            if (Id != 0)
            {
                Livro = await LivroService.GetLivroByIdAsync(Id);

                // Verifica se o livro foi encontrado
                if (Livro == null)
                {
                    // Redireciona para a lista se o livro não for encontrado
                    Navigation.NavigateTo("/livros");
                }
            }
        }
        catch (Exception ex)
        {
            // Log ou exibe a exceção
            Console.WriteLine($"Erro ao carregar dados: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (Livro.Id == 0)
            {
                await LivroService.CreateLivroAsync(Livro);
            }
            else
            {
                await LivroService.UpdateLivroAsync(Livro);
            }

            // Redireciona para a lista de livros após salvar
            Navigation.NavigateTo("/livros");
        }
        catch (Exception ex)
        {
            // Log ou exibe a exceção
            Console.WriteLine($"Erro ao salvar livro: {ex.Message}");
        }
    }
}
